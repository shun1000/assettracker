// rollup.min-config.js
import autoprefixer from "autoprefixer";
import babel from "rollup-plugin-babel";
import commonjs from "rollup-plugin-commonjs";
import cssnano from "cssnano";
import nodeResolve from "rollup-plugin-node-resolve";
import postcss from "postcss";
import sass from "rollup-plugin-sass";
import sourcemaps from "rollup-plugin-sourcemaps";
import uglify from "rollup-plugin-uglify";
import { minify } from "uglify-es";

const config = {
  input: "build/module/index.js",
  output: {
    sourcemap: true,
    banner: `/*!
 * @license
 *
 * Scandit Barcode Scanner SDK for the Web
 *
 * Copyright Â© 2018 Scandit AG. All Rights Reserved.
 *
 * The use of this software is governed by the Scandit Terms and Conditions.
 * https://ssl.scandit.com/terms/test.pdf
 */`
  },
  plugins: [
    nodeResolve({
      module: true,
      jsnext: true,
      browser: true
    }),
    commonjs({
      namedExports: {
        "node_modules/eventemitter3/index.js": ["EventEmitter"]
      }
    }),
    sass({
      insert: true,
      processor: css => {
        return postcss([autoprefixer, cssnano])
          .process(css, { from: undefined })
          .then(result => {
            return result.css;
          });
      }
    }),
    babel({
      presets: [
        [
          "env",
          {
            targets: {
              browsers: ["last 3 versions", "> 0.1%"]
            },
            modules: false
          }
        ]
      ],
      plugins: ["transform-runtime"],
      babelrc: false,
      runtimeHelpers: true,
      exclude: "node_modules/**"
    })
  ],
  onwarn: function(message) {
    if (/Circular dependency:/.test(message) || /core-js\/library\/modules\/es6\.object\.to-string\.js/.test(message)) {
      return;
    }
    console.error(message);
  }
};

if (process.env.NODE_ENV === "production") {
  config.plugins.push(
    uglify(
      {
        output: {
          comments: /^!|@preserve|@license|@cc_on/i
        },
        compress: {
          passes: 3
        }
      },
      minify
    )
  );
  config.plugins.push(sourcemaps());
} else {
  config.plugins.push(
    uglify(
      {
        compress: {
          booleans: false,
          collapse_vars: false,
          comparisons: false,
          conditionals: false,
          dead_code: true,
          drop_debugger: false,
          evaluate: false,
          expression: true,
          hoist_funs: false,
          hoist_vars: false,
          if_return: false,
          inline: false,
          join_vars: false,
          keep_fnames: true,
          keep_infinity: true,
          loops: false,
          negate_iife: false,
          properties: false,
          reduce_vars: false,
          sequences: false,
          typeofs: false,
          unused: true
        },
        mangle: false,
        output: {
          beautify: false,
          keep_quoted_props: true,
          comments: /^!|@preserve|@license|@cc_on/i
        }
      },
      minify
    )
  );
  config.plugins.push(sourcemaps());
}

export default config;
