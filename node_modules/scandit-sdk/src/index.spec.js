"use strict";
/**
 * Index tests
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
exports.__esModule = true;
var ava_1 = require("ava");
var ScanditSDK = require("scandit-sdk");
var sinon = require("sinon");
global.Worker = sinon.stub().returns({
    postMessage: sinon.stub(),
    terminate: sinon.stub()
});
URL.createObjectURL = sinon.stub();
// Set inside setupBrowserEnv.js
var baseUrl = "https://example.com/";
var processImageStub = sinon.stub(ScanditSDK.Scanner.prototype, "processImage");
var getCamerasStub = sinon.stub(ScanditSDK.CameraAccess, "getCameras");
ava_1.test.serial("configure", function (t) { return __awaiter(_this, void 0, void 0, function () {
    var error;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                processImageStub.resetHistory();
                getCamerasStub.resetHistory();
                return [4 /*yield*/, t.throws(ScanditSDK.configure(""))];
            case 1:
                error = _a.sent();
                t.is(error.name, "UnsupportedBrowserError");
                ScanditSDK.BrowserHelper.checkBrowserCompatibility = function () {
                    return undefined;
                };
                return [4 /*yield*/, t.throws(ScanditSDK.configure(null))];
            case 2:
                error = _a.sent();
                t.is(error.name, "NoLicenseKeyError");
                return [4 /*yield*/, t.throws(ScanditSDK.configure(""))];
            case 3:
                error = _a.sent();
                t.is(error.name, "NoLicenseKeyError");
                return [4 /*yield*/, t.throws(ScanditSDK.configure(" "))];
            case 4:
                error = _a.sent();
                t.is(error.name, "NoLicenseKeyError");
                t["false"](processImageStub.called);
                t["false"](getCamerasStub.called);
                processImageStub.callsFake(function () {
                    return Promise.resolve({
                        barcodes: []
                    });
                });
                getCamerasStub.callsFake(function () {
                    return Promise.resolve([]);
                });
                return [4 /*yield*/, t.notThrows(ScanditSDK.configure("license_key"))];
            case 5:
                _a.sent();
                t.is(ScanditSDK.userLicenseKey, "license_key");
                t.is(ScanditSDK.scanditEngineLocation, baseUrl);
                return [4 /*yield*/, t.notThrows(ScanditSDK.configure("license_key", { engineLocation: "" }))];
            case 6:
                _a.sent();
                t.is(ScanditSDK.scanditEngineLocation, baseUrl);
                return [4 /*yield*/, t.notThrows(ScanditSDK.configure("license_key", { engineLocation: "/" }))];
            case 7:
                _a.sent();
                t.is(ScanditSDK.scanditEngineLocation, baseUrl);
                return [4 /*yield*/, t.notThrows(ScanditSDK.configure("license_key", { engineLocation: "test" }))];
            case 8:
                _a.sent();
                t.is(ScanditSDK.scanditEngineLocation, baseUrl + "test/");
                return [4 /*yield*/, t.notThrows(ScanditSDK.configure("license_key", { engineLocation: "https://another_example.com" }))];
            case 9:
                _a.sent();
                t.is(ScanditSDK.scanditEngineLocation, "https://another_example.com/");
                return [4 /*yield*/, t.notThrows(ScanditSDK.configure("license_key", { engineLocation: "https://another_example.com/" }))];
            case 10:
                _a.sent();
                t.is(ScanditSDK.scanditEngineLocation, "https://another_example.com/");
                return [4 /*yield*/, t.notThrows(ScanditSDK.configure("license_key", { preloadEngineLibrary: true }))];
            case 11:
                _a.sent();
                t["true"](processImageStub.called);
                t["false"](getCamerasStub.called);
                processImageStub.resetHistory();
                getCamerasStub.resetHistory();
                return [4 /*yield*/, t.notThrows(ScanditSDK.configure("license_key", { preloadCameras: true }))];
            case 12:
                _a.sent();
                t["false"](processImageStub.called);
                t["true"](getCamerasStub.called);
                processImageStub.resetHistory();
                getCamerasStub.resetHistory();
                return [4 /*yield*/, t.notThrows(ScanditSDK.configure("license_key", { preloadCameras: true, preloadEngineLibrary: true }))];
            case 13:
                _a.sent();
                t["true"](processImageStub.called);
                t["true"](getCamerasStub.called);
                processImageStub.callsFake(function () {
                    return Promise.reject(new Error("Test error"));
                });
                return [4 /*yield*/, t.throws(ScanditSDK.configure("license_key", { preloadEngineLibrary: true }))];
            case 14:
                error = _a.sent();
                t.is(error.message, "Test error");
                processImageStub.resetBehavior();
                getCamerasStub.callsFake(function () {
                    return Promise.reject(new Error("Test error 2"));
                });
                return [4 /*yield*/, t.throws(ScanditSDK.configure("license_key", { preloadCameras: true }))];
            case 15:
                error = _a.sent();
                t.is(error.message, "Test error 2");
                getCamerasStub.resetBehavior();
                return [2 /*return*/];
        }
    });
}); });
ava_1.test.serial("loadEngineLibrary", function (t) { return __awaiter(_this, void 0, void 0, function () {
    var error;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                processImageStub.resetHistory();
                processImageStub.callsFake(function () {
                    return Promise.resolve({
                        barcodes: []
                    });
                });
                return [4 /*yield*/, t.notThrows(ScanditSDK.loadEngineLibrary())];
            case 1:
                _a.sent();
                t["true"](processImageStub.called);
                processImageStub.callsFake(function () {
                    return Promise.reject(new Error("Test error"));
                });
                return [4 /*yield*/, t.throws(ScanditSDK.loadEngineLibrary())];
            case 2:
                error = _a.sent();
                t.is(error.message, "Test error");
                ScanditSDK.BrowserHelper.checkBrowserCompatibility = function () {
                    return new Error("Test error 2");
                };
                return [4 /*yield*/, t.throws(ScanditSDK.loadEngineLibrary())];
            case 3:
                error = _a.sent();
                t.is(error.message, "Test error 2");
                return [2 /*return*/];
        }
    });
}); });
