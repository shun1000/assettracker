import { BarcodeEncodingRange } from "./barcodeEncodingRange";
import { Quadrilateral } from "./quadrilateral";

/**
 * A barcode result.
 */
export interface Barcode {
  /**
   * The symbology type.
   */
  readonly symbology: Barcode.Symbology;
  /**
   * The data encoded in the barcode interpreted as a UTF-8 string.
   * If the raw data is not a valid UTF-8 string, this field will be an empty string.
   */
  readonly data: string;
  /**
   * The raw data encoded in the barcode, given as an array of bytes.
   * To interpret this correctly you may have to use the information contained in encodingArray.
   */
  readonly rawData: Uint8Array;
  /**
   * The location of the barcode.
   */
  readonly location: Quadrilateral;
  /**
   * Whether the barcode is part of a composite code.
   */
  readonly compositeFlag: Barcode.CompositeFlag;
  /**
   * Whether the barcode is a GS1 data carrier.
   */
  readonly isGs1DataCarrier: boolean;
  /**
   * The data encoding of the data in the barcode, given as an array of encoding ranges.
   */
  readonly encodingArray: BarcodeEncodingRange[];
}

export namespace Barcode {
  // Deprecated but useful function for easy UTF-8 handling
  /**
   * @hidden
   */
  declare function escape(s: string): string;

  /**
   * @hidden
   *
   * Create a [[Barcode]] object from a partial object returned by the external Scandit Engine library.
   * The <i>rawData</i> and <i>data</i> fields are computed and stored.
   *
   * @param result The barcode result coming from the external Scandit Engine library.
   * @returns The generated [[Barcode]] object.
   */
  export function createFromWASMResult(result: any): Barcode {
    let decodedData: string;
    try {
      decodedData = decodeURIComponent(escape(String.fromCharCode.apply(null, result.rawData)));
    } catch (error) {
      decodedData = "";
    }

    return {
      symbology: result.symbology,
      data: decodedData,
      rawData: new Uint8Array(result.rawData),
      location: {
        topLeft: { x: result.location[0][0], y: result.location[0][1] },
        topRight: { x: result.location[1][0], y: result.location[1][1] },
        bottomRight: { x: result.location[2][0], y: result.location[2][1] },
        bottomLeft: { x: result.location[3][0], y: result.location[3][1] }
      },
      compositeFlag: result.compositeFlag,
      isGs1DataCarrier: result.isGs1DataCarrier,
      encodingArray: result.encodingArray
    };
  }

  /**
   * Barcode symbology type.
   */
  export enum Symbology {
    EAN13 = "ean13",
    EAN8 = "ean8",
    UPCA = "upca",
    UPCE = "upce",
    CODE128 = "code128",
    CODE39 = "code39",
    CODE93 = "code93",
    INTERLEAVED_2_OF_5 = "itf",
    QR = "qr",
    DATA_MATRIX = "data-matrix",
    PDF417 = "pdf417",
    MSI_PLESSEY = "msi-plessey",
    GS1_DATABAR = "databar",
    GS1_DATABAR_EXPANDED = "databar-expanded",
    CODABAR = "codabar",
    AZTEC = "aztec",
    TWO_DIGIT_ADD_ON = "two-digit-add-on",
    FIVE_DIGIT_ADD_ON = "five-digit-add-on",
    MAXICODE = "maxicode",
    CODE11 = "code11",
    GS1_DATABAR_LIMITED = "databar-limited",
    CODE25 = "code25",
    MICRO_PDF417 = "micropdf417",
    RM4SCC = "rm4scc",
    KIX = "kix",
    DOTCODE = "dotcode"
  }

  /**
   * Flags to hint that two codes form a composite code.
   */
  export enum CompositeFlag {
    /**
     * Code is not part of a composite code.
     */
    NONE = 0x0,
    /**
     * Code could be part of a composite code. This flag is set by linear (1D) symbologies that have
     * no composite flag support but can be part of a composite code like the EAN/UPC symbology family.
     */
    UNKNOWN = 0x1,
    /**
     * Code is the linear component of a composite code. This flag can be set by GS1 DataBar or GS1-128 (Code 128).
     */
    LINKED = 0x2,
    /**
     * Code is a GS1 Composite Code Type A (CC - A).This flag can be set by MicroPDF417 codes.
     */
    GS1_A = 0x4,
    /**
     * Code is a GS1 Composite Code Type B (CC-B). This flag can be set by MicroPDF417 codes.
     */
    GS1_B = 0x8,
    /**
     * Code is a GS1 Composite Code Type C (CC-C). This flag can be set by PDF417 codes.
     */
    GS1_C = 0x10
  }

  // istanbul ignore next
  export namespace Symbology {
    // tslint:disable:no-unnecessary-qualifier
    /**
     * Get the humanized name of a symbology.
     *
     * @param symbology The symbology for which to retrieve the name.
     * @returns The humanized name of the symbology.
     */
    // tslint:disable-next-line:cyclomatic-complexity
    export function toHumanizedName(symbology: Symbology): string {
      switch (symbology.toLowerCase()) {
        case Symbology.EAN13:
          return "EAN-13";
        case Symbology.EAN8:
          return "EAN-8";
        case Symbology.UPCA:
          return "UPC-A";
        case Symbology.UPCE:
          return "UPC-E";
        case Symbology.CODE128:
          return "Code 128";
        case Symbology.CODE39:
          return "Code 39";
        case Symbology.CODE93:
          return "Code 93";
        case Symbology.INTERLEAVED_2_OF_5:
          return "Interleaved Two of Five";
        case Symbology.QR:
          return "QR";
        case Symbology.DATA_MATRIX:
          return "Data Matrix";
        case Symbology.PDF417:
          return "PDF417";
        case Symbology.MSI_PLESSEY:
          return "MSI-Plessey";
        case Symbology.GS1_DATABAR:
          return "GS1 DataBar 14";
        case Symbology.GS1_DATABAR_EXPANDED:
          return "GS1 DataBar Expanded";
        case Symbology.CODABAR:
          return "Codabar";
        case Symbology.AZTEC:
          return "Aztec";
        case Symbology.TWO_DIGIT_ADD_ON:
          return "Two-Digit Add-On";
        case Symbology.FIVE_DIGIT_ADD_ON:
          return "Five-Digit Add-On";
        case Symbology.MAXICODE:
          return "MaxiCode";
        case Symbology.CODE11:
          return "Code 11";
        case Symbology.GS1_DATABAR_LIMITED:
          return "GS1 DataBar Limited";
        case Symbology.CODE25:
          return "Code 25";
        case Symbology.MICRO_PDF417:
          return "MicroPDF417";
        case Symbology.RM4SCC:
          return "RM4SCC";
        case Symbology.KIX:
          return "KIX";
        case Symbology.DOTCODE:
          return "DotCode";
        default:
          return "Unknown";
      }
    }

    /**
     * Get the JSON key name of a symbology, used for JSON-formatted ScanSettings and Scandit Engine library.
     *
     * @param symbology The symbology for which to retrieve the name.
     * @returns The json key name of the symbology.
     */
    // tslint:disable-next-line:cyclomatic-complexity
    export function toJSONName(symbology: Symbology): string {
      switch (symbology.toLowerCase()) {
        case Symbology.EAN13:
          return "ean13";
        case Symbology.EAN8:
          return "ean8";
        case Symbology.UPCA:
          return "upca";
        case Symbology.UPCE:
          return "upce";
        case Symbology.CODE128:
          return "code128";
        case Symbology.CODE39:
          return "code39";
        case Symbology.CODE93:
          return "code93";
        case Symbology.INTERLEAVED_2_OF_5:
          return "itf";
        case Symbology.QR:
          return "qr";
        case Symbology.DATA_MATRIX:
          return "data-matrix";
        case Symbology.PDF417:
          return "pdf417";
        case Symbology.MSI_PLESSEY:
          return "msi-plessey";
        case Symbology.GS1_DATABAR:
          return "databar";
        case Symbology.GS1_DATABAR_EXPANDED:
          return "databar-expanded";
        case Symbology.CODABAR:
          return "codabar";
        case Symbology.AZTEC:
          return "aztec";
        case Symbology.TWO_DIGIT_ADD_ON:
          return "two-digit-add-on";
        case Symbology.FIVE_DIGIT_ADD_ON:
          return "five-digit-add-on";
        case Symbology.MAXICODE:
          return "maxicode";
        case Symbology.CODE11:
          return "code11";
        case Symbology.GS1_DATABAR_LIMITED:
          return "databar-limited";
        case Symbology.CODE25:
          return "code25";
        case Symbology.MICRO_PDF417:
          return "micropdf417";
        case Symbology.RM4SCC:
          return "rm4scc";
        case Symbology.KIX:
          return "kix";
        case Symbology.DOTCODE:
          return "dotcode";
        default:
          return "unknown";
      }
    }
    // tslint:enable:no-unnecessary-qualifier
  }
}
