"use strict";
exports.__esModule = true;
var base64assets_1 = require("./assets/base64assets");
var barcodePicker_1 = require("./barcodePicker");
var camera_1 = require("./camera");
var cameraAccess_1 = require("./cameraAccess");
var cameraSettings_1 = require("./cameraSettings");
var customError_1 = require("./customError");
/**
 * @hidden
 *
 * A barcode picker utility class used to handle camera interaction.
 */
var BarcodePickerCameraManager = /** @class */ (function () {
    function BarcodePickerCameraManager(barcodePicker) {
        this.barcodePicker = barcodePicker;
        this.postStreamInitializationListener = this.postStreamInitialization.bind(this);
        this.triggerManualFocusListener = this.triggerManualFocus.bind(this);
        this.setupCameraSwitcher();
        this.setupTorchToggle();
    }
    BarcodePickerCameraManager.prototype.setUIOptions = function (enableCameraSwitcher, enableTorchToggle, enableTapToFocus) {
        this.enableCameraSwitcher = enableCameraSwitcher;
        this.enableTorchToggle = enableTorchToggle;
        this.enableTapToFocus = enableTapToFocus;
    };
    BarcodePickerCameraManager.prototype.setSelectedCamera = function (camera) {
        this.selectedCamera = camera;
    };
    BarcodePickerCameraManager.prototype.setSelectedCameraSettings = function (cameraSettings) {
        this.selectedCameraSettings = cameraSettings;
    };
    BarcodePickerCameraManager.prototype.setupCameras = function () {
        var _this = this;
        return cameraAccess_1.CameraAccess.getCameras().then(function (cameras) {
            if (_this.enableCameraSwitcher && cameras.length > 1) {
                _this.cameraSwitcherElement.classList.remove("scandit-hidden");
            }
            if (_this.selectedCamera == null) {
                var autoselectedCamera = cameras.find(function (currentCamera) {
                    return currentCamera.cameraType === camera_1.Camera.Type.BACK;
                });
                if (autoselectedCamera === undefined) {
                    autoselectedCamera = cameras[0];
                }
                if (autoselectedCamera === undefined) {
                    return Promise.reject(new customError_1.CustomError({ name: "NoCameraAvailableError", message: "No camera available" }));
                }
                return _this.initializeCameraWithSettings(autoselectedCamera, _this.selectedCameraSettings);
            }
            else {
                return _this.initializeCameraWithSettings(_this.selectedCamera, _this.selectedCameraSettings);
            }
        });
    };
    BarcodePickerCameraManager.prototype.stopStream = function () {
        if (this.mediaStream != null) {
            window.clearTimeout(this.cameraAccessTimeout);
            window.clearTimeout(this.getCapabilitiesTimeout);
            window.clearTimeout(this.manualFocusRetryTimeout);
            window.clearTimeout(this.manualToAutofocusResumeTimeout);
            window.clearInterval(this.autofocusInterval);
            this.mediaStream.getVideoTracks().forEach(function (track) {
                track.stop();
            });
            this.mediaStream = undefined;
            this.mediaTrackCapabilities = undefined;
        }
    };
    BarcodePickerCameraManager.prototype.applyCameraSettings = function (cameraSettings) {
        if (this.activeCamera == null) {
            return Promise.reject(new customError_1.CustomError({ name: "NoCameraAvailableError", message: "No camera available" }));
        }
        return this.initializeCameraWithSettings(this.activeCamera, cameraSettings);
    };
    BarcodePickerCameraManager.prototype.reinitializeCamera = function () {
        if (this.activeCamera == null) {
            return Promise.reject(new customError_1.CustomError({ name: "NoCameraAvailableError", message: "No camera available" }));
        }
        return this.initializeCameraWithSettings(this.activeCamera, this.activeCameraSettings);
    };
    BarcodePickerCameraManager.prototype.initializeCameraWithSettings = function (camera, cameraSettings) {
        this.activeCameraSettings = cameraSettings;
        if (cameraSettings != null && cameraSettings.resolutionPreference === cameraSettings_1.CameraSettings.ResolutionPreference.FULL_HD) {
            return this.initializeCamera(camera);
        }
        else {
            return this.initializeCamera(camera, 3);
        }
    };
    BarcodePickerCameraManager.prototype.setTorchEnabled = function (enabled) {
        if (this.mediaStream != null && this.mediaTrackCapabilities != null && this.mediaTrackCapabilities.torch) {
            var videoTracks = this.mediaStream.getVideoTracks();
            if (videoTracks.length !== 0 && typeof videoTracks[0].applyConstraints === "function") {
                videoTracks[0].applyConstraints({ advanced: [{ torch: enabled }] });
            }
        }
    };
    BarcodePickerCameraManager.prototype.triggerManualFocus = function (event) {
        var _this = this;
        if (event != null) {
            event.preventDefault();
        }
        window.clearTimeout(this.manualFocusRetryTimeout);
        window.clearTimeout(this.manualToAutofocusResumeTimeout);
        if (this.mediaStream != null && this.mediaTrackCapabilities != null) {
            var focusModeCapability = this.mediaTrackCapabilities.focusMode;
            if (focusModeCapability instanceof Array && focusModeCapability.indexOf("single-shot") !== -1) {
                if (focusModeCapability.indexOf("continuous") !== -1 && focusModeCapability.indexOf("manual") !== -1) {
                    this.triggerFocusMode("manual")
                        .then(function () {
                        _this.triggerFocusMode("single-shot");
                        // Sometimes the previous call fails silently,
                        // so we retrigger it shortly afterwards anyways just to be sure. This has no negative consequences.
                        _this.manualFocusRetryTimeout = window.setTimeout(function () {
                            _this.triggerFocusMode("single-shot");
                        }, BarcodePickerCameraManager.manualFocusRetryTimeoutMs);
                    })["catch"](function () {
                        // Ignored
                    });
                    this.manualToAutofocusResumeTimeout = window.setTimeout(function () {
                        _this.triggerFocusMode("continuous");
                    }, BarcodePickerCameraManager.manualToAutofocusResumeTimeoutMs);
                }
                else if (focusModeCapability.indexOf("continuous") === -1) {
                    window.clearInterval(this.autofocusInterval);
                    this.triggerFocusMode("single-shot")["catch"](function () {
                        // Ignored
                    });
                    this.manualToAutofocusResumeTimeout = window.setTimeout(function () {
                        _this.autofocusInterval = window.setInterval(_this.triggerAutoFocus.bind(_this), BarcodePickerCameraManager.autofocusIntervalMs);
                    }, BarcodePickerCameraManager.manualToAutofocusResumeTimeoutMs);
                }
            }
        }
    };
    BarcodePickerCameraManager.prototype.postStreamInitialization = function () {
        var _this = this;
        window.clearTimeout(this.getCapabilitiesTimeout);
        this.getCapabilitiesTimeout = window.setTimeout(function () {
            _this.storeStreamCapabilities();
            _this.setupAutofocus();
            if (_this.enableTorchToggle &&
                _this.mediaStream != null &&
                _this.mediaTrackCapabilities != null &&
                _this.mediaTrackCapabilities.torch) {
                _this.torchToggleElement.classList.remove("scandit-hidden");
            }
        }, BarcodePickerCameraManager.getCapabilitiesTimeoutMs);
    };
    BarcodePickerCameraManager.prototype.storeStreamCapabilities = function () {
        if (this.mediaStream != null) {
            var videoTracks = this.mediaStream.getVideoTracks();
            if (videoTracks.length !== 0 && typeof videoTracks[0].getCapabilities === "function") {
                this.mediaTrackCapabilities = videoTracks[0].getCapabilities();
            }
        }
    };
    BarcodePickerCameraManager.prototype.setupAutofocus = function () {
        window.clearTimeout(this.manualFocusRetryTimeout);
        window.clearTimeout(this.manualToAutofocusResumeTimeout);
        if (this.mediaStream != null && this.mediaTrackCapabilities != null) {
            var focusModeCapability = this.mediaTrackCapabilities.focusMode;
            if (focusModeCapability instanceof Array &&
                focusModeCapability.indexOf("continuous") === -1 &&
                focusModeCapability.indexOf("single-shot") !== -1) {
                window.clearInterval(this.autofocusInterval);
                this.autofocusInterval = window.setInterval(this.triggerAutoFocus.bind(this), BarcodePickerCameraManager.autofocusIntervalMs);
            }
        }
    };
    BarcodePickerCameraManager.prototype.triggerAutoFocus = function () {
        this.triggerFocusMode("single-shot")["catch"](function () {
            // Ignored
        });
    };
    BarcodePickerCameraManager.prototype.triggerFocusMode = function (focusMode) {
        if (this.mediaStream != null) {
            var videoTracks = this.mediaStream.getVideoTracks();
            if (videoTracks.length !== 0 && typeof videoTracks[0].applyConstraints === "function") {
                return videoTracks[0].applyConstraints({ advanced: [{ focusMode: focusMode }] });
            }
        }
        return Promise.reject(undefined);
    };
    BarcodePickerCameraManager.prototype.initializeCamera = function (camera, resolutionFallbackLevel) {
        var _this = this;
        if (resolutionFallbackLevel === void 0) { resolutionFallbackLevel = 0; }
        if (camera == null) {
            return Promise.reject(new customError_1.CustomError({ name: "NoCameraAvailableError", message: "No camera available" }));
        }
        if (this.activeCamera != null) {
            this.activeCamera.currentResolution = undefined;
        }
        this.stopStream();
        this.torchEnabled = false;
        this.torchToggleElement.classList.add("scandit-hidden");
        return new Promise(function (resolve, reject) {
            cameraAccess_1.CameraAccess.accessCameraStream(resolutionFallbackLevel, camera)
                .then(function (stream) {
                // Detect weird browser behaviour that on unsupported resolution returns a 2x2 video instead
                if (typeof stream.getTracks()[0].getSettings === "function") {
                    var mediaTrackSettings = stream.getTracks()[0].getSettings();
                    if (mediaTrackSettings.width != null &&
                        mediaTrackSettings.height != null &&
                        (mediaTrackSettings.width === 2 || mediaTrackSettings.height === 2)) {
                        if (resolutionFallbackLevel === 6) {
                            return reject(new customError_1.CustomError({ name: "NotReadableError", message: "Could not initialize camera correctly" }));
                        }
                        else {
                            return _this.initializeCamera(camera, resolutionFallbackLevel + 1)
                                .then(function () {
                                return resolve();
                            })["catch"](function (error) {
                                return reject(error);
                            });
                        }
                    }
                }
                _this.mediaStream = stream;
                // This will add the listener only once in the case of multiple calls, identical listeners are ignored
                _this.barcodePicker.videoElement.addEventListener("loadedmetadata", _this.postStreamInitializationListener);
                if (_this.enableTapToFocus) {
                    ["touchstart", "mousedown"].forEach(function (eventName) {
                        _this.barcodePicker.videoElement.addEventListener(eventName, _this.triggerManualFocusListener);
                    });
                }
                _this.resolveInitializeCamera(camera, resolve, reject);
                _this.barcodePicker.videoElement.srcObject = stream;
                _this.barcodePicker.videoElement.load();
                var playPromise = _this.barcodePicker.videoElement.play();
                if (playPromise != null) {
                    playPromise["catch"](function () {
                        // Can sometimes cause an incorrect rejection (all is good, ignore).
                    });
                }
            })["catch"](function (error) {
                if (error.name === "PermissionDeniedError" ||
                    error.name === "PermissionDismissedError" ||
                    error.name === "NotAllowedError" ||
                    error.name === "NotFoundError" ||
                    error.name === "AbortError") {
                    // Camera is not accessible at all
                    return reject(error);
                }
                if (resolutionFallbackLevel < 6) {
                    return _this.initializeCamera(camera, resolutionFallbackLevel + 1)
                        .then(function (mediaStream) {
                        return resolve(mediaStream);
                    })["catch"](function (error2) {
                        return reject(error2);
                    });
                }
                else {
                    return reject(error);
                }
            });
        });
    };
    BarcodePickerCameraManager.prototype.resolveInitializeCamera = function (camera, resolve, reject) {
        var _this = this;
        var cameraNotReadableError = new customError_1.CustomError({
            name: "NotReadableError",
            message: "Could not initialize camera correctly"
        });
        this.cameraAccessTimeout = window.setTimeout(function () {
            _this.stopStream();
            reject(cameraNotReadableError);
        }, BarcodePickerCameraManager.cameraAccessTimeoutMs);
        if (BarcodePickerCameraManager.isIOSDevice) {
            // iOS camera access should always work but can fail to call "later" video callbacks, so we check loadstart
            this.barcodePicker.videoElement.onloadstart = function () {
                _this.barcodePicker.videoElement.onloadstart = null;
                window.clearTimeout(_this.cameraAccessTimeout);
                _this.activeCamera = camera;
                _this.barcodePicker.setMirrorImageEnabled(_this.activeCamera.cameraType === camera_1.Camera.Type.FRONT);
                resolve(_this.barcodePicker);
            };
        }
        else {
            this.barcodePicker.videoElement.onloadeddata = function () {
                _this.barcodePicker.videoElement.onloadeddata = null;
                window.clearTimeout(_this.cameraAccessTimeout);
                // Detect weird browser behaviour that on unsupported resolution returns a 2x2 video instead
                // Also detect failed camera access with no error but also no video stream provided
                if (_this.barcodePicker.videoElement.videoWidth === 2 ||
                    _this.barcodePicker.videoElement.videoHeight === 2 ||
                    _this.barcodePicker.videoElement.currentTime === 0) {
                    _this.stopStream();
                    return reject(cameraNotReadableError);
                }
                _this.activeCamera = camera;
                _this.barcodePicker.setMirrorImageEnabled(_this.activeCamera.cameraType === camera_1.Camera.Type.FRONT);
                resolve(_this.barcodePicker);
            };
        }
    };
    BarcodePickerCameraManager.prototype.setupCameraSwitcher = function () {
        var _this = this;
        this.cameraSwitcherElement = document.createElement("img");
        this.cameraSwitcherElement.src = base64assets_1.switchCameraImage;
        this.cameraSwitcherElement.className = barcodePicker_1.BarcodePicker.cameraSwitcherElementClassName;
        this.cameraSwitcherElement.classList.add("scandit-hidden");
        this.barcodePicker.parentElement.appendChild(this.cameraSwitcherElement);
        ["touchstart", "mousedown"].forEach(function (eventName) {
            _this.cameraSwitcherElement.addEventListener(eventName, function (event) {
                event.preventDefault();
                cameraAccess_1.CameraAccess.getCameras()
                    .then(function (cameras) {
                    var newCameraIndex = (cameras.findIndex(function (camera) {
                        return camera.deviceId === (_this.activeCamera == null ? camera.deviceId : _this.activeCamera.deviceId);
                    }) +
                        1) %
                        cameras.length;
                    _this.initializeCameraWithSettings(cameras[newCameraIndex], _this.activeCameraSettings)["catch"](function (error) {
                        console.error(error);
                    });
                })["catch"](function (error) {
                    console.error(error);
                });
            });
        });
    };
    BarcodePickerCameraManager.prototype.setupTorchToggle = function () {
        var _this = this;
        this.torchToggleElement = document.createElement("img");
        this.torchToggleElement.src = base64assets_1.toggleTorchImage;
        this.torchToggleElement.className = barcodePicker_1.BarcodePicker.torchToggleElementClassName;
        this.torchToggleElement.classList.add("scandit-hidden");
        this.barcodePicker.parentElement.appendChild(this.torchToggleElement);
        ["touchstart", "mousedown"].forEach(function (eventName) {
            _this.torchToggleElement.addEventListener(eventName, function (event) {
                event.preventDefault();
                _this.torchEnabled = !_this.torchEnabled;
                _this.setTorchEnabled(_this.torchEnabled);
            });
        });
    };
    BarcodePickerCameraManager.isIOSDevice = navigator.platform != null &&
        navigator.platform !== "" &&
        /iPad|iPhone|iPod/.test(navigator.platform);
    BarcodePickerCameraManager.cameraAccessTimeoutMs = 2000;
    BarcodePickerCameraManager.getCapabilitiesTimeoutMs = 500;
    BarcodePickerCameraManager.autofocusIntervalMs = 1500;
    BarcodePickerCameraManager.manualToAutofocusResumeTimeoutMs = 5000;
    BarcodePickerCameraManager.manualFocusRetryTimeoutMs = 100;
    return BarcodePickerCameraManager;
}());
exports.BarcodePickerCameraManager = BarcodePickerCameraManager;
