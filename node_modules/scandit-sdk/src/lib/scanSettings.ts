import { Barcode } from "./barcode";
import { SearchArea } from "./searchArea";
import { SymbologySettings } from "./symbologySettings";
/**
 * A configuration object for scanning options.
 *
 * Modified ScanSettings need to be applied to a scanner via
 * [[BarcodePicker.applyScanSettings]] or [[Scanner.applyScanSettings]] to take effect.
 */
export class ScanSettings {
  // TODO: [symbology in Barcode.Symbology] not working as index type for now...
  private symbologySettings: { [symbology: string]: SymbologySettings };
  private codeDuplicateFilter: number;
  private maxNumberOfCodesPerFrame: number;
  private searchArea: SearchArea;

  /**
   * Creates a ScanSettings instance.
   *
   * @param enabledSymbologies <div class="tsd-signature-symbol">Default =&nbsp;[]</div>
   * The single symbology or list/set of symbologies
   * that should be initialized as enabled for recognition.
   * @param codeDuplicateFilter <div class="tsd-signature-symbol">Default =&nbsp;0</div>
   * The duplicate filter specifying how often a code can be scanned.
   * When the filter is set to -1, each unique code is only scanned once. When set to 0,
   * duplicate filtering is disabled. Otherwise the duplicate filter specifies an interval in milliseconds.
   * When the same code (data/symbology) is scanned within the specified interval it is filtered out as a duplicate.
   * @param maxNumberOfCodesPerFrame <div class="tsd-signature-symbol">Default =&nbsp;1</div>
   * The maximum number of barcodes to be recognized every frame.
   * @param searchArea <div class="tsd-signature-symbol">Default =&nbsp;{ x: 0, y: 0, width: 1.0, height: 1.0 }</div>
   * The area of the image in which barcodes are searched.
   */
  constructor(
    {
      enabledSymbologies = [],
      codeDuplicateFilter = 0,
      maxNumberOfCodesPerFrame = 1,
      searchArea = { x: 0, y: 0, width: 1.0, height: 1.0 }
    }: {
      enabledSymbologies?: Barcode.Symbology | Barcode.Symbology[] | Set<Barcode.Symbology>;
      codeDuplicateFilter?: number;
      maxNumberOfCodesPerFrame?: number;
      searchArea?: SearchArea;
    } = {}
  ) {
    this.symbologySettings = {};
    this.enableSymbologies(enabledSymbologies);
    this.codeDuplicateFilter = codeDuplicateFilter;
    this.maxNumberOfCodesPerFrame = maxNumberOfCodesPerFrame;
    this.searchArea = searchArea;
  }

  /**
   * @returns The configuration object as a JSON string.
   */
  public toJSONString(): string {
    // TODO: [symbology in Barcode.Symbology] not working as index type for now...
    const symbologies: { [jsonSymbologyName: string]: SymbologySettings } = {};
    Object.keys(this.symbologySettings).forEach(s => {
      symbologies[Barcode.Symbology.toJSONName(<Barcode.Symbology>s)] = (<any>this.symbologySettings)[s];
    });

    const isFullSearchArea: boolean =
      Math.round(this.searchArea.x * 100) === 0 &&
      Math.round(this.searchArea.y * 100) === 0 &&
      Math.round(this.searchArea.width * 100) === 100 &&
      Math.round(this.searchArea.height * 100) === 100;

    return JSON.stringify({
      symbologies: symbologies,
      codeDuplicateFilter: this.codeDuplicateFilter,
      maxNumberOfCodesPerFrame: this.maxNumberOfCodesPerFrame,
      searchArea: this.searchArea,
      codeLocation1d: isFullSearchArea
        ? undefined
        : {
            area: this.searchArea
          },
      codeLocation2d: isFullSearchArea
        ? undefined
        : {
            area: this.searchArea
          }
    });
  }

  /**
   * Get the configuration object for a symbology (which can then be modified).
   *
   * @param symbology The symbology for which to retrieve the configuration.
   * @returns The symbology configuration object for the specified symbology.
   */
  public getSymbologySettings(symbology: Barcode.Symbology): SymbologySettings {
    const ls: string = symbology.toLowerCase();
    if (this.symbologySettings.hasOwnProperty(ls)) {
      return this.symbologySettings[ls];
    } else {
      this.symbologySettings[ls] = new SymbologySettings();

      return this.symbologySettings[ls];
    }
  }

  /**
   * Get the recognition enabled status for a symbology.
   *
   * @param symbology The symbology for which to retrieve the recognition enabled status.
   * @returns Whether the symbology enabled for recognition.
   */
  public isSymbologyEnabled(symbology: Barcode.Symbology): boolean {
    const ls: string = symbology.toLowerCase();

    return this.symbologySettings.hasOwnProperty(ls) && this.symbologySettings[ls].isEnabled();
  }

  /**
   * Enable recognition of a symbology or list/set of symbologies.
   *
   * @param symbology The single symbology or list/set of symbologies to enable.
   * @returns The updated [[ScanSettings]] object.
   */
  public enableSymbologies(symbology: Barcode.Symbology | Barcode.Symbology[] | Set<Barcode.Symbology>): ScanSettings {
    return this.setSymbologiesEnabled(symbology, true);
  }

  /**
   * Disable recognition of a symbology or list/set of symbologies.
   *
   * @param symbology The single symbology or list/set of symbologies to disable.
   * @returns The updated [[ScanSettings]] object.
   */
  public disableSymbologies(symbology: Barcode.Symbology | Barcode.Symbology[] | Set<Barcode.Symbology>): ScanSettings {
    return this.setSymbologiesEnabled(symbology, false);
  }

  /**
   * When the filter is set to -1, each unique code is only scanned once. When set to 0,
   * duplicate filtering is disabled. Otherwise the duplicate filter specifies an interval in milliseconds.
   *
   * @returns The code duplicate filter value.
   */
  public getCodeDuplicateFilter(): number {
    return this.codeDuplicateFilter;
  }

  /**
   * Set the code duplicate filter value.
   *
   * When the filter is set to -1, each unique code is only scanned once. When set to 0,
   * duplicate filtering is disabled. Otherwise the duplicate filter specifies an interval in milliseconds.
   *
   * @param durationMilliseconds The new value (-1, 0, or positive integer).
   * @returns The updated [[ScanSettings]] object.
   */
  public setCodeDuplicateFilter(durationMilliseconds: number): ScanSettings {
    this.codeDuplicateFilter = durationMilliseconds;

    return this;
  }

  /**
   * @returns The maximum number of barcodes to be recognized every frame.
   */
  public getMaxNumberOfCodesPerFrame(): number {
    return this.maxNumberOfCodesPerFrame;
  }

  /**
   * Set the maximum number of barcodes to be recognized every frame.
   *
   * @param limit The new value (non-zero positive integer).
   * @returns The updated [[ScanSettings]] object.
   */
  public setMaxNumberOfCodesPerFrame(limit: number): ScanSettings {
    this.maxNumberOfCodesPerFrame = limit;

    return this;
  }

  /**
   * @returns The area of the image in which barcodes are searched.
   */
  public getSearchArea(): SearchArea {
    return this.searchArea;
  }

  /**
   * Set the area of the image in which barcodes are searched.
   *
   * @param searchArea The new search area.
   * @returns The updated [[ScanSettings]] object.
   */
  public setSearchArea(searchArea: SearchArea): ScanSettings {
    this.searchArea = searchArea;

    return this;
  }

  private setSymbologiesEnabled(
    symbology: Barcode.Symbology | Barcode.Symbology[] | Set<Barcode.Symbology>,
    enabled: boolean
  ): ScanSettings {
    if (typeof symbology === "object") {
      for (const s of symbology) {
        const ls: string = s.toLowerCase();
        if (s in Barcode.Symbology || Object.values(Barcode.Symbology).indexOf(ls) !== -1) {
          if (this.symbologySettings.hasOwnProperty(ls)) {
            this.symbologySettings[ls].setEnabled(enabled);
          } else {
            this.symbologySettings[ls] = new SymbologySettings({ enabled: enabled });
          }
        }
      }
    } else {
      const ls: string = symbology.toLowerCase();
      if (symbology in Barcode.Symbology || Object.values(Barcode.Symbology).indexOf(ls) !== -1) {
        if (this.symbologySettings.hasOwnProperty(ls)) {
          this.symbologySettings[ls].setEnabled(enabled);
        } else {
          this.symbologySettings[ls] = new SymbologySettings({ enabled: enabled });
        }
      }
    }

    return this;
  }
}
