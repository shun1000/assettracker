"use strict";
/* tslint:disable:insecure-random */
/**
 * Scanner tests
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
exports.__esModule = true;
var ava_1 = require("ava");
var scandit_sdk_1 = require("scandit-sdk");
var sinon = require("sinon");
var postMessageStub = sinon.stub();
var terminateStub = sinon.stub();
var stubs = [postMessageStub, terminateStub];
global.Worker = sinon.stub().returns({
    postMessage: postMessageStub,
    terminate: terminateStub
});
URL.createObjectURL = sinon.stub();
function resetStubs() {
    stubs.forEach(function (mock) {
        mock.resetHistory();
    });
}
function prepareBrowserAndLibrary() {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    scandit_sdk_1.BrowserHelper.checkBrowserCompatibility = function () {
                        return undefined;
                    };
                    return [4 /*yield*/, scandit_sdk_1.configure("license_key")];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
ava_1.test.serial("constructor", function (t) { return __awaiter(_this, void 0, void 0, function () {
    var s, error, ss, is;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                error = t.throws(function () {
                    s = new scandit_sdk_1.Scanner();
                });
                t.is(error.name, "UnsupportedBrowserError");
                scandit_sdk_1.BrowserHelper.checkBrowserCompatibility = function () {
                    return undefined;
                };
                error = t.throws(function () {
                    s = new scandit_sdk_1.Scanner();
                });
                t.is(error.name, "LibraryNotConfiguredError");
                return [4 /*yield*/, scandit_sdk_1.configure("license_key")];
            case 1:
                _a.sent();
                resetStubs();
                s = new scandit_sdk_1.Scanner();
                t["false"](s.isReady());
                t["false"](s.isBusyProcessing());
                t.is(postMessageStub.getCalls().length, 3);
                t.deepEqual(postMessageStub.getCall(0).args, [
                    {
                        deviceId: scandit_sdk_1.BrowserHelper.getDeviceId(),
                        libraryLocation: "https://example.com/",
                        type: "load-library"
                    }
                ]);
                t.deepEqual(postMessageStub.getCall(1).args, [
                    {
                        licenseKey: "license_key",
                        type: "license-key"
                    }
                ]);
                t.deepEqual(postMessageStub.getCall(2).args, [
                    {
                        settings: new scandit_sdk_1.ScanSettings().toJSONString(),
                        type: "settings"
                    }
                ]);
                resetStubs();
                ss = new scandit_sdk_1.ScanSettings({
                    enabledSymbologies: scandit_sdk_1.Barcode.Symbology.QR,
                    codeDuplicateFilter: 10,
                    maxNumberOfCodesPerFrame: 10,
                    searchArea: { x: 0.5, y: 0.5, width: 0.5, height: 0.1 }
                });
                s = new scandit_sdk_1.Scanner({
                    scanSettings: ss
                });
                t.is(postMessageStub.getCalls().length, 3);
                t.deepEqual(postMessageStub.getCall(2).args, [
                    {
                        settings: ss.toJSONString(),
                        type: "settings"
                    }
                ]);
                resetStubs();
                is = {
                    width: 640,
                    height: 480,
                    format: scandit_sdk_1.ImageSettings.Format.RGBA_8U
                };
                s = new scandit_sdk_1.Scanner({
                    imageSettings: is
                });
                t.is(postMessageStub.getCalls().length, 4);
                t.deepEqual(postMessageStub.getCall(3).args, [
                    {
                        imageSettings: is,
                        type: "image-settings"
                    }
                ]);
                return [2 /*return*/];
        }
    });
}); });
ava_1.test.serial("destroy", function (t) { return __awaiter(_this, void 0, void 0, function () {
    var s;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, prepareBrowserAndLibrary()];
            case 1:
                _a.sent();
                resetStubs();
                s = new scandit_sdk_1.Scanner();
                s.destroy();
                t["true"](terminateStub.called);
                resetStubs();
                s = new scandit_sdk_1.Scanner();
                s.engineSDKWorker = null;
                s.destroy();
                t["false"](terminateStub.called);
                return [2 /*return*/];
        }
    });
}); });
ava_1.test.serial("applyScanSettings", function (t) { return __awaiter(_this, void 0, void 0, function () {
    var ss, s;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, prepareBrowserAndLibrary()];
            case 1:
                _a.sent();
                resetStubs();
                ss = new scandit_sdk_1.ScanSettings({
                    enabledSymbologies: scandit_sdk_1.Barcode.Symbology.QR,
                    codeDuplicateFilter: 10,
                    maxNumberOfCodesPerFrame: 10,
                    searchArea: { x: 0.5, y: 0.5, width: 0.5, height: 0.1 }
                });
                s = new scandit_sdk_1.Scanner();
                t.is(postMessageStub.getCalls().length, 3);
                t.deepEqual(postMessageStub.getCall(2).args, [
                    {
                        settings: new scandit_sdk_1.ScanSettings().toJSONString(),
                        type: "settings"
                    }
                ]);
                s.applyScanSettings(ss);
                t.is(postMessageStub.getCalls().length, 4);
                t.deepEqual(postMessageStub.getCall(3).args, [
                    {
                        settings: ss.toJSONString(),
                        type: "settings"
                    }
                ]);
                return [2 /*return*/];
        }
    });
}); });
ava_1.test.serial("applyImageSettings", function (t) { return __awaiter(_this, void 0, void 0, function () {
    var is, s;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, prepareBrowserAndLibrary()];
            case 1:
                _a.sent();
                resetStubs();
                is = {
                    width: 640,
                    height: 480,
                    format: scandit_sdk_1.ImageSettings.Format.RGBA_8U
                };
                s = new scandit_sdk_1.Scanner();
                t.is(postMessageStub.getCalls().length, 3);
                t.deepEqual(postMessageStub.getCall(2).args, [
                    {
                        settings: new scandit_sdk_1.ScanSettings().toJSONString(),
                        type: "settings"
                    }
                ]);
                s.applyImageSettings(is);
                t.is(postMessageStub.getCalls().length, 4);
                t.deepEqual(postMessageStub.getCall(3).args, [
                    {
                        imageSettings: is,
                        type: "image-settings"
                    }
                ]);
                return [2 /*return*/];
        }
    });
}); });
ava_1.test.serial("isReady & onReady", function (t) { return __awaiter(_this, void 0, void 0, function () {
    var s, callbackSpy1, callbackSpy2, callbackSpy3;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, prepareBrowserAndLibrary()];
            case 1:
                _a.sent();
                resetStubs();
                s = new scandit_sdk_1.Scanner();
                callbackSpy1 = sinon.spy();
                callbackSpy2 = sinon.spy();
                t["false"](s.isReady());
                s.onReady(callbackSpy1);
                t["false"](callbackSpy1.called);
                s.onReady(callbackSpy2);
                t["false"](callbackSpy1.called);
                t["false"](callbackSpy2.called);
                s.engineSDKWorker.onmessage({
                    data: ["status", "example-not-ready"]
                });
                t["false"](s.isReady());
                t["false"](callbackSpy1.called);
                t["false"](callbackSpy2.called);
                s.engineSDKWorker.onmessage({
                    data: ["status", "ready"]
                });
                t["true"](s.isReady());
                t["true"](callbackSpy1.called);
                t["true"](callbackSpy2.called);
                t["true"](callbackSpy2.calledAfter(callbackSpy1));
                resetStubs();
                s = new scandit_sdk_1.Scanner();
                s.engineSDKWorker.onmessage({
                    data: ["status", "ready"]
                });
                callbackSpy3 = sinon.spy();
                t["true"](s.isReady());
                s.onReady(callbackSpy3);
                t["true"](callbackSpy3.called);
                return [2 /*return*/];
        }
    });
}); });
ava_1.test.serial("processImage calls", function (t) { return __awaiter(_this, void 0, void 0, function () {
    var s, error, imageData;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, prepareBrowserAndLibrary()];
            case 1:
                _a.sent();
                s = new scandit_sdk_1.Scanner();
                resetStubs();
                return [4 /*yield*/, t.throws(s.processImage(new Uint8ClampedArray(0)))];
            case 2:
                error = _a.sent();
                t.is(error.name, "NoImageSettings");
                t.is(s.workerScanRequestId, 0);
                t.is(s.workerScanQueueLength, 0);
                t["false"](s.isBusyProcessing());
                t["false"](postMessageStub.called);
                s.applyImageSettings({
                    width: 3,
                    height: 2,
                    format: scandit_sdk_1.ImageSettings.Format.RGBA_8U
                });
                resetStubs();
                return [4 /*yield*/, t.throws(s.processImage(new Uint8ClampedArray(0)))];
            case 3:
                error = _a.sent();
                t.is(error.name, "ImageSettingsDataMismatch");
                t.is(s.workerScanRequestId, 0);
                t.is(s.workerScanQueueLength, 0);
                t["false"](s.isBusyProcessing());
                t["false"](postMessageStub.called);
                resetStubs();
                imageData = Uint8ClampedArray.from({ length: 24 }, function () {
                    return Math.floor(Math.random() * 255);
                });
                s.processImage(imageData); // 3 * 2 * 4
                t["true"](s.isBusyProcessing());
                t.is(postMessageStub.getCalls().length, 1);
                t.deepEqual(postMessageStub.getCall(0).args, [
                    {
                        type: "work",
                        requestId: 1,
                        data: imageData.buffer
                    },
                    [imageData.buffer]
                ]);
                s.applyImageSettings({
                    width: 3,
                    height: 2,
                    format: scandit_sdk_1.ImageSettings.Format.RGB_8U
                });
                resetStubs();
                imageData = Uint8ClampedArray.from({ length: 18 }, function () {
                    return Math.floor(Math.random() * 255);
                });
                s.processImage(imageData); // 3 * 2 * 3
                t.is(postMessageStub.getCalls().length, 1);
                t.deepEqual(postMessageStub.getCall(0).args, [
                    {
                        type: "work",
                        requestId: 2,
                        data: imageData.buffer
                    },
                    [imageData.buffer]
                ]);
                s.applyImageSettings({
                    width: 3,
                    height: 2,
                    format: scandit_sdk_1.ImageSettings.Format.GRAY_8U
                });
                resetStubs();
                imageData = Uint8ClampedArray.from({ length: 6 }, function () {
                    return Math.floor(Math.random() * 255);
                });
                s.processImage(imageData); // 3 * 2 * 1
                t.is(postMessageStub.getCalls().length, 1);
                t.deepEqual(postMessageStub.getCall(0).args, [
                    {
                        type: "work",
                        requestId: 3,
                        data: imageData.buffer
                    },
                    [imageData.buffer]
                ]);
                s.applyImageSettings({
                    width: 3,
                    height: 2,
                    format: 999 // Fake format
                });
                resetStubs();
                imageData = Uint8ClampedArray.from({ length: 6 }, function () {
                    return Math.floor(Math.random() * 255);
                });
                s.processImage(imageData); // 3 * 2 * 1
                t.is(s.workerScanRequestId, 4);
                t.is(s.workerScanQueueLength, 4);
                t.is(postMessageStub.getCalls().length, 1);
                t.deepEqual(postMessageStub.getCall(0).args, [
                    {
                        type: "work",
                        requestId: 4,
                        data: imageData.buffer
                    },
                    [imageData.buffer]
                ]);
                return [2 /*return*/];
        }
    });
}); });
// tslint:disable-next-line:max-func-body-length
ava_1.test.serial("processImage results", function (t) { return __awaiter(_this, void 0, void 0, function () {
    var s, imageData, processImage1, processImage2, processImage3, error, scanResult;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, prepareBrowserAndLibrary()];
            case 1:
                _a.sent();
                resetStubs();
                s = new scandit_sdk_1.Scanner();
                s.applyImageSettings({
                    width: 3,
                    height: 2,
                    format: scandit_sdk_1.ImageSettings.Format.RGBA_8U
                });
                imageData = Uint8ClampedArray.from({ length: 24 }, function () {
                    return Math.floor(Math.random() * 255);
                });
                processImage1 = s.processImage(imageData);
                t["true"](s.isBusyProcessing());
                imageData = Uint8ClampedArray.from({ length: 24 }, function () {
                    return Math.floor(Math.random() * 255);
                });
                processImage2 = s.processImage(imageData);
                imageData = Uint8ClampedArray.from({ length: 24 }, function () {
                    return Math.floor(Math.random() * 255);
                });
                processImage3 = s.processImage(imageData);
                t.is(s.workerScanRequestId, 3);
                t.is(s.workerScanQueueLength, 3);
                s.engineWokerOnMessage({
                    data: [
                        "work-error",
                        {
                            requestId: 2,
                            error: {
                                errorCode: 123,
                                errorMessage: "example_error"
                            }
                        }
                    ]
                });
                return [4 /*yield*/, t.throws(processImage2)];
            case 2:
                error = _a.sent();
                t.deepEqual(error.message, "example_error (123)");
                t.is(s.workerScanQueueLength, 2);
                s.engineWokerOnMessage({
                    data: [
                        "work-result",
                        {
                            requestId: 1,
                            result: []
                        }
                    ]
                });
                return [4 /*yield*/, processImage1];
            case 3:
                scanResult = _a.sent();
                t.deepEqual(scanResult, {
                    barcodes: []
                });
                t.is(s.workerScanQueueLength, 1);
                s.engineWokerOnMessage({
                    data: [
                        "work-result",
                        {
                            requestId: 3,
                            result: [
                                {
                                    symbology: "qr",
                                    rawData: [97, 98, 99, 100],
                                    location: [[1, 2], [3, 4], [5, 6], [7, 8]],
                                    compositeFlag: scandit_sdk_1.Barcode.CompositeFlag.NONE,
                                    isGs1DataCarrier: false,
                                    encodingArray: []
                                }
                            ]
                        }
                    ]
                });
                return [4 /*yield*/, processImage3];
            case 4:
                scanResult = _a.sent();
                t.deepEqual(scanResult, {
                    barcodes: [
                        {
                            compositeFlag: scandit_sdk_1.Barcode.CompositeFlag.NONE,
                            data: "abcd",
                            encodingArray: [],
                            isGs1DataCarrier: false,
                            location: {
                                bottomLeft: {
                                    x: 7,
                                    y: 8
                                },
                                bottomRight: {
                                    x: 5,
                                    y: 6
                                },
                                topLeft: {
                                    x: 1,
                                    y: 2
                                },
                                topRight: {
                                    x: 3,
                                    y: 4
                                }
                            },
                            rawData: new Uint8Array([97, 98, 99, 100]),
                            symbology: scandit_sdk_1.Barcode.Symbology.QR
                        }
                    ]
                });
                t.is(s.workerScanQueueLength, 0);
                s.engineWokerOnMessage({
                    data: []
                });
                return [2 /*return*/];
        }
    });
}); });
// tslint:disable-next-line:max-func-body-length
ava_1.test.serial("createParserForFormat & parseString", function (t) { return __awaiter(_this, void 0, void 0, function () {
    var s, parser, parseString1, parseString2, parseString3, error, resultData, parserResult, fieldsByName;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, prepareBrowserAndLibrary()];
            case 1:
                _a.sent();
                s = new scandit_sdk_1.Scanner();
                resetStubs();
                parser = s.createParserForFormat(scandit_sdk_1.Parser.DataFormat.DLID);
                t.not(parser, null);
                t.is(s.workerParseRequestId, 0);
                t["false"](s.isBusyProcessing());
                t["false"](postMessageStub.called);
                parseString1 = s.parseString(scandit_sdk_1.Parser.DataFormat.DLID, "abcd");
                t.is(s.workerParseRequestId, 1);
                t["false"](s.isBusyProcessing());
                t.is(postMessageStub.getCalls().length, 1);
                t.deepEqual(postMessageStub.getCall(0).args, [
                    {
                        type: "parse-string",
                        requestId: 1,
                        dataFormat: scandit_sdk_1.Parser.DataFormat.DLID,
                        dataString: "abcd",
                        options: "{}"
                    }
                ]);
                resetStubs();
                parseString2 = s.parseString(scandit_sdk_1.Parser.DataFormat.GS1_AI, "efgh");
                t.is(s.workerParseRequestId, 2);
                t["false"](s.isBusyProcessing());
                t.is(postMessageStub.getCalls().length, 1);
                t.deepEqual(postMessageStub.getCall(0).args, [
                    {
                        type: "parse-string",
                        requestId: 2,
                        dataFormat: scandit_sdk_1.Parser.DataFormat.GS1_AI,
                        dataString: "efgh",
                        options: "{}"
                    }
                ]);
                resetStubs();
                parseString3 = s.parseString(scandit_sdk_1.Parser.DataFormat.HIBC, "ijkl", {
                    exampleOption: true
                });
                t.is(s.workerParseRequestId, 3);
                t["false"](s.isBusyProcessing());
                t.is(postMessageStub.getCalls().length, 1);
                t.deepEqual(postMessageStub.getCall(0).args, [
                    {
                        type: "parse-string",
                        requestId: 3,
                        dataFormat: scandit_sdk_1.Parser.DataFormat.HIBC,
                        dataString: "ijkl",
                        options: '{"exampleOption":true}'
                    }
                ]);
                resetStubs();
                s.engineWokerOnMessage({
                    data: [
                        "parse-string-error",
                        {
                            requestId: 2,
                            error: {
                                errorCode: 123,
                                errorMessage: "example_error"
                            }
                        }
                    ]
                });
                return [4 /*yield*/, t.throws(parseString2)];
            case 2:
                error = _a.sent();
                t.deepEqual(error.message, "example_error (123)");
                resultData = [
                    {
                        name: "field1",
                        parsed: 1,
                        rawString: "123"
                    },
                    {
                        name: "field2",
                        parsed: "abcd",
                        rawString: "efgh"
                    },
                    {
                        name: "field3",
                        parsed: {
                            subField1: 1,
                            subField2: 2
                        },
                        rawString: "sf1sf2"
                    }
                ];
                s.engineWokerOnMessage({
                    data: [
                        "parse-string-result",
                        {
                            requestId: 1,
                            result: JSON.stringify(resultData)
                        }
                    ]
                });
                return [4 /*yield*/, parseString1];
            case 3:
                parserResult = _a.sent();
                fieldsByName = {};
                resultData.forEach(function (parserField) {
                    fieldsByName[parserField.name] = parserField;
                });
                t.deepEqual(parserResult, {
                    fields: resultData,
                    fieldsByName: fieldsByName,
                    jsonString: JSON.stringify(resultData)
                });
                s.engineWokerOnMessage({
                    data: [
                        "parse-string-result",
                        {
                            requestId: 3,
                            result: JSON.stringify([])
                        }
                    ]
                });
                return [4 /*yield*/, parseString3];
            case 4:
                parserResult = _a.sent();
                t.deepEqual(parserResult, {
                    fields: [],
                    fieldsByName: {},
                    jsonString: JSON.stringify([])
                });
                return [2 /*return*/];
        }
    });
}); });
